AWSTemplateFormatVersion: 2010-09-09
Description: >-
  # This CloudFormation template sets up a single-instance WordPress deployment.
  # It includes an EC2 instance running WordPress with a MySQL database for storage.
  # The template uses CloudFormation bootstrap scripts to configure and launch WordPress.
  # **WARNING**: Resources created by this stack, like EC2, may incur costs.

Parameters:
  # Parameters to personalize and configure the deployment
  KeyName:
    # Specifies the EC2 KeyPair for SSH access
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    # EC2 instance type for the WordPress server
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro # Default instance type
    AllowedValues: # List of valid instance types allowed
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      # (additional values omitted for brevity)
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    # Defines allowed IP range for SSH access
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0 # Default allows all IPs; modify for security
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DBName:
    # MySQL database name for WordPress
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBUser:
    # MySQL database username; hidden in the console for security
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    # MySQL database password; hidden in the console for security
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBRootPassword:
    # MySQL root password; hidden in the console for security
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Mappings:
  # Maps instance types and regions to architectures and AMIs
  AWSInstanceType2Arch:
    # Maps instance types to architectures
    t1.micro:
      Arch: HVM64
    # (additional mappings omitted for brevity)

  AWSRegionArch2AMI:
    # Maps AWS regions and architectures to AMIs
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    # (additional mappings omitted for brevity)

Resources:
  # Defines AWS resources required for the stack
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      # Security group for web server with HTTP and SSH access rules
      GroupDescription: >-
        Enable HTTP access via port 80 locked down to the load balancer + SSH
        access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allows HTTP access from all IPs
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation # Allows SSH access as per the given parameter

  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      # Metadata for bootstrapping the EC2 instance with WordPress
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        install_cfn:
          # Configuration steps to install CloudFormation
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400' # Permissions for the file
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServer '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true' # Service should be running
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        install_wordpress:
          # Packages and configuration for installing WordPress
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              mysql57-server: []
              mysql57-devel: []
              mysql57-libs: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz' # Source for WordPress
          files:
            /tmp/setup.mysql:
              # Script to set up MySQL database and user
              content: !Join 
                - ''
                - - 'CREATE DATABASE '
                  - !Ref DBName
                  - |
                    ;
                  - CREATE USER '
                  - !Ref DBUser
                  - '''@''localhost'' IDENTIFIED BY '''
                  - !Ref DBPassword
                  - |
                    ';
                  - 'GRANT ALL ON '
                  - !Ref DBName
                  - .* TO '
                  - !Ref DBUser
                  - |
                    '@'localhost';
                  - |
                    FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
            /tmp/create-wp-config:
              # Script to configure WordPress
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true' # HTTPD (Apache) should be running
                ensureRunning: 'true'
              mysqld:
                enabled: 'true' # MySQL service should be running
                ensureRunning: 'true'

        configure_wordpress:
          # Commands to configure MySQL and WordPress
          commands:
            01_set_mysql_root_password:
              command: !Join 
                - ''
                - - mysqladmin -u root password '
                  - !Ref DBRootPassword
                  - ''''
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Join 
                - ''
                - - mysql -u root --password='
                  - !Ref DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress

    Properties:
      # EC2 instance properties for setting up WordPress
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: # User data script to initialize the EC2 instance
        'Fn::Base64':
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                yum update -y aws-cfn-bootstrap
              - '/opt/aws/bin/cfn-init -v '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource WebServer '
              - '         --configsets wordpress_install '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

              - '/opt/aws/bin/cfn-signal -e $? '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource WebServer '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

    CreationPolicy:
      # Creation policy to signal when the instance is ready
      ResourceSignal:
        Timeout: PT15M

Outputs:
  # Outputs section defines values returned after stack creation
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicDnsName
        - /wordpress
    Description: WordPress Website # Output to provide the URL of the deployed WordPress site
