AWSTemplateFormatVersion: 2010-09-09

Parameters:
  # VPC identifier where resources will be deployed
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: Must be the VPC Id of an existing Virtual Private Cloud.

  # List of Subnet IDs within the VPC for distributing resources across availability zones
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your VPC
    ConstraintDescription: Must be a list of at least two subnets across different availability zones within the selected VPC.

  # Type of EC2 instance to launch
  InstanceType:
    Type: String
    Default: t2.micro  # Default instance type
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium  # Valid instance types
    Description: WebServer EC2 instance type
    ConstraintDescription: Must be a valid EC2 instance type.

  # EC2 KeyPair for SSH access to the instances
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  # CIDR range allowed to SSH into the EC2 instances
  SSHLocation:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Description: The IP address range for SSH access
    ConstraintDescription: Must be a valid IP CIDR range in the format x.x.x.x/x.

  # Use the latest Amazon Linux 2 AMI from SSM
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # Auto Scaling Group to automatically manage EC2 instances
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:  # Wait for resource signals to confirm instances are operational
        Timeout: PT15M
        Count: 2  # Expects two instances to send a success signal
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1                # Updates one instance at a time for rolling updates
        MinInstancesInService: 1       # Ensures at least one instance is in service during updates
        PauseTime: PT15M               # Pause duration while updating instances
        WaitOnResourceSignals: true    # Wait for resource signals during updates
    Properties:
      VPCZoneIdentifier: !Ref Subnets  # List of subnet IDs for the Auto Scaling Group
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: "2"   # Minimum number of EC2 instances
      MaxSize: "4"   # Maximum number of EC2 instances
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  # Definition of the Launch Configuration for Auto Scaling instances
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []  # Install Apache HTTP Server
          files:
            '/var/www/html/index.html':
              content: | 
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
                <h2>Version: 1.0</h2>
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              # Configuration for CloudFormation hooks to manage resource updates
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'  # Ensures the HTTP server is running
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'  # Ensures CloudFormation stack synchronization
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      KeyName: !Ref KeyName  # The KeyPair for SSH access
      ImageId: !Ref ImageId  # SSM parameter for the AMI ID
      InstanceType: !Ref InstanceType  # EC2 instance type
      SecurityGroups:
        - !Ref InstanceSecurityGroup  # Security group for the instances
      UserData:  # User data script to initialize the instance
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Install AWS CloudFormation bootstrap tools
          yum install -y aws-cfn-bootstrap
          # Initialize the CloudFormation stack configuration on the instance
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          # Signal the successful completion of configuration
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  # Elastic Load Balancer to distribute incoming HTTP traffic
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets  # Subnets for the load balancer
      SecurityGroups:
        - !Ref ALBSecurityGroup  # Security group for the load balancer
  
  # Listener for the Load Balancer to route traffic to the target group
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup  # Targets traffic to the target group
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Target group for the Load Balancer to manage EC2 targets
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30  # Interval between health checks for instances
      HealthCheckTimeoutSeconds: 5    # Timeout for health check responses
      HealthyThresholdCount: 3        # Number of successful checks before considering the instance healthy
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5      # Number of failed checks before considering the instance unhealthy
      VpcId: !Ref VpcId  # VPC in which the target group is located

  # Security group for the Load Balancer to control inbound HTTP traffic
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allows HTTP access from any IP address
      VpcId: !Ref VpcId

  # Security group for instances to allow SSH and HTTP access
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access on the configured ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation  # SSH access allowed from specified IP range
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0       # HTTP access allowed from any IP address
      VpcId: !Ref VpcId

Outputs:
  # Outputs the URL where the deployed application can be accessed
  URL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
