AWSTemplateFormatVersion: 2010-09-09

# Description: Provisions infrastructure with a load-balanced auto-scaling web server setup.

Parameters:
  # Specifies the ID of an existing Virtual Private Cloud (VPC)
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: Must be the VPC Id of an existing Virtual Private Cloud.

  # List of subnet IDs within the VPC for deploying resources
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of SubnetIds in your VPC
    ConstraintDescription: Must include at least two existing subnets in different availability zones.

  # Type of EC2 instance to launch in the Auto Scaling group
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    Description: EC2 instance type for the web servers
    ConstraintDescription: Must be a valid EC2 instance type.

  # KeyPair name for SSH access to the EC2 instances
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  # IP range allowed for SSH access to the instances
  SSHLocation:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Description: The IP address range for SSH access
    ConstraintDescription: Must be a valid IP CIDR range in the form x.x.x.x/x.

  # Amazon Linux 2 AMI ID from SSM
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # Auto Scaling Group for managing web server instances
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M  # Time allotted for instances to signal they're ready
        Count: 2        # Expected count of success signals from instances
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1                # Updates one instance at a time
        MinInstancesInService: 1       # Keeps at least one instance running
        PauseTime: PT15M               # Pauses for up to 15 minutes during update
        WaitOnResourceSignals: true    # Waits for resource signals during updates
    Properties:
      VPCZoneIdentifier: !Ref Subnets  # Uses the provided subnets
      LaunchConfigurationName: !Ref LaunchConfigUpdated
      MinSize: "2"   # Minimum two instances in the group
      MaxSize: "4"   # Maximum four instances in the group
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  # Launch configuration for the Auto Scaling group
  LaunchConfigUpdated:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []  # Installs Apache HTTP server
          files:
            '/var/www/html/index.html':
              content: | 
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
                <h2>Version: 2.0</h2>
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfigUpdated.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigUpdated --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      KeyName: !Ref KeyName  # Includes the KeyPair for SSH
      ImageId: !Ref ImageId  # Uses the specified image ID
      InstanceType: !Ref InstanceType  # Type of EC2 instance to launch
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Installs CloudFormation helper scripts
          yum install -y aws-cfn-bootstrap
          # Initializes the resources defined in the CloudFormation template
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigUpdated --region ${AWS::Region}
          # Signals completion of instance setup
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  # Application Load Balancer for distributing traffic across multiple instances
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets  # Defines the subnets for the Load Balancer
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Listener for the Load Balancer to forward traffic to target group
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Target group for the Load Balancer
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30  # Interval between health checks
      HealthCheckTimeoutSeconds: 5    # Timeout for health checks
      HealthyThresholdCount: 3        # Number of successful checks to mark the target healthy
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5      # Number of failed checks to mark the target unhealthy
      VpcId: !Ref VpcId

  # Security group for the Load Balancer to allow HTTP traffic
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0    # Allows HTTP access from any IP
      VpcId: !Ref VpcId

  # Security group for instances to allow SSH and HTTP access
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation  # Allows SSH access from the specified IP range
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0         # Allows HTTP access from any IP
      VpcId: !Ref VpcId

Outputs:
  URL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
    # Outputs the public URL for accessing the website hosted by the load balancer
