AWSTemplateFormatVersion: '2010-09-09'
Description: "Create a Firehose stream that writes to S3"

Resources:
  # Custom resource representing an S3 Bucket module by MyCompany
  FirehoseDestination:
    Type: MyCompany::S3::Bucket::MODULE  # Custom resource type, provided as a module
    Properties:
      KMSKeyAlias: !Sub "${AWS::StackName}"  # Uses the stack name as an alias for the KMS key
      ReadWriteArn: !GetAtt FirehoseRole.Arn  # ARN for a role with read/write access, obtained from the Firehose role
      ReadOnlyArn: !Sub 'arn:aws:iam::${AWS::AccountId}:root'  # Grants full access to the account root

  # IAM role for Kinesis Firehose to operate, assuming permissions
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeRole1
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com  # Allows Firehose service to assume this role
            Action: 'sts:AssumeRole'  # Permission to assume roles in AWS

  # IAM policy associated with the Firehose role to enable required actions
  FirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "ReadWrite"  # Name of the policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "KmsEncryptionDecryption"
            Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Resource: !GetAtt FirehoseDestinationKmsKey.Arn  # References the KMS key ARN within the module
            Condition:
              StringEquals:
                kms:ViaService: !Sub 's3:${AWS::Region}.amazonaws.com'  # Limits services through which the KMS operations are allowed
              StringLike:
                kms:EncryptionContext:aws:s3:arn: !Sub '${FirehoseDestinationBucket.Arn}/*'  # Specifies encryption context for S3
          - Sid: FirehoseAccess
            Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
            Resource: !GetAtt Firehose.Arn  # Firehose stream access permissions
          - Sid: "S3ListBucket"
            Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:ListBucketByTags'
              - 's3:ListBucketMultipartUploads'
              - 's3:GetBucketLocation'
            Resource: !GetAtt FirehoseDestinationBucket.Arn  # Bucket access for listing and location services
          - Sid: "S3GetPutDeleteObject"
            Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectTagging'
              - 's3:GetObject'
              - 's3:GetObjectTagging'
              - 's3:PutObject'
              - 's3:PutObjectTagging'
            Resource: !Sub '${FirehoseDestinationBucket.Arn}/*'  # Allows object-level actions in the bucket
      Roles: 
        - !Ref FirehoseRole  # Attach the policies to the Firehose role

  # Kinesis Firehose delivery stream configuration for direct put into the bucket
  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "${AWS::StackName}"  # Name of the Firehose stream
      DeliveryStreamType: DirectPut  # Specifies direct data input to Firehose
      S3DestinationConfiguration:
        BucketARN: !GetAtt FirehoseDestinationBucket.Arn  # The S3 bucket ARN inside the module
        RoleARN: !GetAtt FirehoseRole.Arn  # Role ARN used by Firehose to write to S3
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt FirehoseDestinationKmsKey.Arn  # Uses the KMS key ARN for encryption
