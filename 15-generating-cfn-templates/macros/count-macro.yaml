AWSTemplateFormatVersion: 2010-09-09
Description: >
  Count Macro
  A simple iterator for creating multipleidentical resources

Resources:
  Macro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: Count
      FunctionName: !GetAtt CountMacroFunction.Arn
  
  CountMacroFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Timeout: 360
      Role: !GetAtt AWSLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import copy
          import json

          def process_template(template, parameters):
            new_template = copy.deepcopy(template)
            status = 'success'

            for name, resource in template['Resources'].items():
              if 'Count' in resource:

                # Check if the value of Count is referenced to a parameter passed in the template
                try:Metadata: 
  License: Apache-2.0
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template Sample template EIP_With_Association:
  This template shows how to associate an Elastic IP address with an Amazon EC2 instance
  - you can use this same technique to associate an EC2 instance with an Elastic IP
  Address that is not created inside the template by replacing the EIP reference in
  the AWS::EC2::EIPAssoication resource type with the IP address of the external EIP.
  **WARNING** This template creates an Amazon EC2 instance and an Elastic IP Address.
  You will be billed for the AWS resources used if you create a stack from this template.'
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData: !Base64
        Fn::Join:
        - ''
        - [IPAddress=, !Ref 'IPAddress']
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
  IPAddress:
    Type: AWS::EC2::EIP
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'EC2Instance'
      EIP: !Ref 'IPAddress'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref 'IPAddress'ount value
                  count = new_template['Resources'][name].pop('Count')
                
                print("Found 'Count' property with value {} in '{}' resource...multiplying!".format(count, name))

                # Remove the original resource from the template but take a local copy of it
                resourceToMultiply = new_template['Resources'].pop(name)

                # Create a new block of the resource muliplied with names ending in the iterator and the placeholders substituted
                resourcesAfterMultiplication = multiply(name, resourceToMultiply, count)

                if not set(resourcesAfterMultiplication.keys()) & set(new_template['Resources'].keys()):
                  new_template['Resources'].update(resourcesAfterMultiplication)
                else:
                  status = 'failed'
                  return status, template
              
              else:
                print("Did not find 'Count' property in '{}' resource...Nothing to do!".format(name))
            
            return status, new_template
        
          def update_placeholder(resource_structure, iteration):

            # Convert the json into a string
            resourceString = json.dumps(resource_structure)

            # Count the number of times the placeholder is found in the string
            placeHolderCount = resourceString.count('%d')

            # If the placeholder is found then replace it
            if placeHolderCount > 0:
              print ("Found {} occurrences of decimal placeholder in JSON, replacing with iterator value {}".format(placeHolderCount, iteration))

              # Make a list of the values that we will use to replace the decimal placeholders - the values will all be the same
              placeHolderReplacementValues = [iteration] * placeHolderCount

              # Replace the decimal placeholders using the list - the syntax below expands the list
              resourceString = resourceString % (*placeHolderReplacementValues,)

              # Convert the string back to JSON and return it
              return json.loads(resourceString)

            else:
              print("No occurrences of decimal placeholder found in JSON, therefore nothing will be replaced")
              return resource_structure
          
          def multiply(resource_name, resource_structure, count):
            resources = {}

            # Loop according to the number of times we want to multiply, creating a new resource each time
            for iteration in range(1, (count + 1)):
              print("Multiplying '{}', iteration count {}".format(resource_name, iteration))
              multipliedResourceStructure = update_placeholder(resource_structure, iteration)
              resources[resource_name + str(iteration)] = multipliedResourceStructure
            
            return resources
          
          def handler(event, context):
            result = process_template(event['fragment'], event['templateParameterValues'])

            return {
              'requestId': event['requestId'],
              'status': result[0],
              'fragment': result[1]
            }

  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole